// new order statuses
const orderStatuses = {
  // # Initial state of order (new)
  INITIATED: 'INITIATED',
  // # Order is placed after payment is okay, cash orders are placed with this status
  PLACED: 'PLACED',
  // # Order is accepted.
  ACCEPTED: 'ACCEPTED',
  // # Order is rejected for some reason. For reason check the rejection reason.
  REJECTED: 'REJECTED',
  // # Order is started and preparing
  PREPARING: 'PREPARING',
  // # Order is prepared.
  PREPARED: 'PREPARED',
  // # Order is prepared and now waiting for the delivery guy to deliver.
  WAITING_FOR_COURIER: 'WAITING_FOR_COURIER',
  // # Order is on its way and out for delivery
  OUT_FOR_DELIVERY: 'OUT_FOR_DELIVERY',
  // # Order is on its way and out for express delivery but 5 min delayed
  DELIVERY_DELAYED: 'DELIVERY_DELAYED',
  // # Order is delivered and waiting to be completed.
  DELIVERED: 'DELIVERED',
  // # For PICKUP this status shows order is prepared and ready to be picked up by customer.
  READY_FOR_PICKUP: 'READY_FOR_PICKUP',
  // # Order is completed and closed as well after all the checks including payment.
  COMPLETED: 'COMPLETED',
  // # Order is completed and closed as well after all the checks including payment.
  REPORTED: 'REPORTED',
  PAYMENT_FAILURE: 'PAYMENT_FAILURE',
  PAYMENT_CANCELED: 'PAYMENT_CANCELED',
};

exports.orderQueueSetStatusName = {
  // New orders
  NEW: 'NEW',
  // In progress order status. will include all the statuses except PLACED,COMPLETED,REJECTED
  IN_PROGRESS: 'IN_PROGRESS',
  // Order is completed and closed as well after all the checks including payment.
  COMPLETED: 'COMPLETED',
};

exports.statusTypes = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  DELETED: 'DELETED',
};

// The fulfillment type of this order
exports.fulfillmentType = {
  // Order is being picked up by the customer
  PICKUP: 'PICKUP',
  // Order is being delivered to the customer
  DELIVERY: 'DELIVERY',
  EXPRESS_DELIVERY: 'EXPRESS_DELIVERY',
};

exports.setBrandLocationAcceptingOrdersError = {
  INVALID_BRAND_LOCATION: 'INVALID_BRAND_LOCATION',
  REASON_MUST_BE_SET: 'REASON_MUST_BE_SET',
  REASON_MAX_LENGTH_EXCEEDED: 'REASON_MAX_LENGTH_EXCEEDED',
  ALREADY_NOT_ACCEPTING_ORDER: 'ALREADY_NOT_ACCEPTING_ORDER',
};

// The different types of customer addresses
exports.customerAddressType = {
  HOUSE: 'HOUSE',
  APARTMENT: 'APARTMENT',
  OFFICE_BUILDING: 'OFFICE_BUILDING',
  AIRPORT: 'AIRPORT',
  HOME: 'HOME',
  OFFICE: 'OFFICE',
  CUSTOM: 'CUSTOM',
};

exports.reverseAddressError = {
  OUT_OF_SERVICE_COUNTRY: 'OUT_OF_SERVICE_COUNTRY',
  INVALID_ADDRESS: 'INVALID_ADDRESS',
  INVALID_GEOCODING: 'INVALID_GEOCODING'
};

exports.paymentStatusName = {
  // Order has been received from customer, and payment initiated with merchant
  PAYMENT_PENDING: 'PAYMENT_PENDING',
  // Order has been paid for, and now needs to be accepted
  PAYMENT_SUCCESS: 'PAYMENT_SUCCESS',
  // Something went wrong with this payment
  PAYMENT_FAILURE: 'PAYMENT_FAILURE',
  PAYMENT_CANCELED: 'PAYMENT_CANCELED',
  NOT_APPLICABLE: 'NOT_APPLICABLE',
};

exports.orderSetStatusName = orderStatuses;

// The reason an order was rejected
exports.orderRejectionReason = {
  // The brand location no longer has stock of a product from this order
  OUT_OF_STOCK: 'OUT_OF_STOCK',
};

// The reason an order was reported
exports.orderReportReason = {
  CUSTOMER_NOT_SHOWED_UP: 'CUSTOMER_NOT_SHOWED_UP',
  TECHNICAL_ISSUE: 'TECHNICAL_ISSUE',
  OTHER: 'OTHER',
};

// Mobile device push notfication services
exports.pushNotificationService = {
  // Apple Push Notification Service (iOS)
  APNS: 'APNS',
  // Google Cloud Messaging (Android)
  GCM: 'GCM',
};

// Routes by which phone numbers can be verified
exports.phoneVerificationRoute = {
  // A code is texted.
  SMS: 'SMS',
  // A code is read aloud by an automated-call.
  VOICE: 'VOICE',
};

exports.brandStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  DELETED: 'DELETED',
  HASNOBRANCH: 'HASNOBRANCH',
};

exports.brandLocationStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  DELETED: 'DELETED',
};

exports.brandSaveError = {
  // Brand must exist
  INVALID_BRAND: 'INVALID_BRAND',
  // Name must be unique
  DUPLICATE_NAME: 'DUPLICATE_NAME',
  // Auth 0 error when creating new user
  AUTH_PROVIDER_ERROR: 'AUTH_PROVIDER_ERROR',
  ADMIN_ALREADY_EXISTS: 'ADMIN_ALREADY_EXISTS',
  COMMISSION_MISSING: 'COMMISSION_MISSING',
  BRANCH_ADMIN_CAN_NOT_BE_BRAND_ADMIN: 'BRANCH_ADMIN_CAN_NOT_BE_BRAND_ADMIN',
  INVALID_ADMIN: 'INVALID_ADMIN',
};

exports.customerRegisterError = {
  // Customer must exist
  INVALID_CUSTOMER: 'INVALID_CUSTOMER',
  // Auth0 Error
  AUTH_PROVIDER_ERROR: 'AUTH_PROVIDER_ERROR',
  // ID must be unique
  DUPLICATE_ID: 'DUPLICATE_ID',
  // Email must be unique
  DUPLICATE_EMAIL: 'DUPLICATE_EMAIL',
  // duplication customer's phone
  DUPLICATE_PHONE: 'DUPLICATE_PHONE',
  // required phone number
  PHONE_REQUIRED: 'PHONE_REQUIRED',
  // required phone country
  PHONE_COUNTRY_REQUIRED: 'PHONE_COUNTRY_REQUIRED',
  // default country code
  INVALID_COUNTRY_CODE: 'INVALID_COUNTRY_CODE',
  // OTP Code Not Provided
  OTP_CODE_NOT_PROVIDED: 'OTP_CODE_NOT_PROVIDED',
  // OTP Validation Failed
  OTP_VALIDATION_FAILED: 'OTP_VALIDATION_FAILED',
  // Customer Email Failed
  INVALID_EMAIL: 'INVALID_EMAIL',
  TERMS_AND_CONDITIONS_MUST_BE_ACCEPTED:
    'TERMS_AND_CONDITIONS_MUST_BE_ACCEPTED',
  PRIVACY_POLICY_MUST_BE_ACCEPTED: 'PRIVACY_POLICY_MUST_BE_ACCEPTED',
};

exports.customerRegisterLiteError = {
  INVALID_CUSTOMER: 'INVALID_CUSTOMER',
  DUPLICATE_PHONE: 'DUPLICATE_PHONE',
  DUPLICATE_EMAIL: 'DUPLICATE_EMAIL',
  DUPLICATE_ID: 'DUPLICATE_ID',
  OTP_VALIDATION_FAILED: 'OTP_VALIDATION_FAILED',
  OTP_CODE_NOT_PROVIDED: 'OTP_CODE_NOT_PROVIDED',
  INVALID_EMAIL: 'INVALID_EMAIL',
  TERMS_AND_CONDITIONS_MUST_BE_ACCEPTED: 'TERMS_AND_CONDITIONS_MUST_BE_ACCEPTED',
  PRIVACY_POLICY_MUST_BE_ACCEPTED: 'PRIVACY_POLICY_MUST_BE_ACCEPTED',
  SERVICE_ERROR: 'SERVICE_ERROR',
};

exports.adminRegisterError = {
  // Auth0 Error
  AUTH_PROVIDER_ERROR: 'AUTH_PROVIDER_ERROR',
  // Email must be unique
  DUPLICATE_EMAIL: 'DUPLICATE_EMAIL',
  // Admin already have CSE permissions  (order queue access)
  ORDER_QUEUE_ADMIN: 'ORDER_QUEUE_ADMIN',
  ALREADY_ADMIN: 'ALREADY_ADMIN',
  GROUP_CONFLICT: 'GROUP_CONFLICT',
};

exports.adminSubscriptionError = {
  INVALID_BRANCH: 'INVALID_BRANCH'
};

exports.customerUpdateError = {
  // Customer must exist
  INVALID_CUSTOMER: 'INVALID_CUSTOMER',
  // duplication customer's phone
  DUPLICATE_PHONE: 'DUPLICATE_PHONE',
  // duplicated email
  DUPLICATE_EMAIL: 'DUPLICATE_EMAIL',
  // required phone number
  PHONE_REQUIRED: 'PHONE_REQUIRED',
  // required phone country
  PHONE_COUNTRY_REQUIRED: 'PHONE_COUNTRY_REQUIRED',
  // Invalid country code
  INVALID_COUNTRY_CODE: 'INVALID_COUNTRY_CODE',
  // Invalid country code
  OTP_FAILED_FOR_PHONE_NUMBER_CHANGE: 'OTP_FAILED_FOR_PHONE_NUMBER_CHANGE',
  // If the target phone number is already in use
  OTP_PHONE_NUMBER_ALREADY_IN_USE: 'OTP_PHONE_NUMBER_ALREADY_IN_USE',
  TERMS_AND_CONDITIONS_MUST_BE_ACCEPTED:
    'TERMS_AND_CONDITIONS_MUST_BE_ACCEPTED',
  PRIVACY_POLICY_MUST_BE_ACCEPTED: 'PRIVACY_POLICY_MUST_BE_ACCEPTED',
};

exports.brandLocationScheduleExceptionSaveError = {
  // Brand Location must be valid
  INVALID_BRAND_LOCATION: 'INVALID_BRAND_LOCATION',
  // Start Time must be smaller than endTime
  INVALID_START_END_RANGE: 'INVALID_START_END_RANGE',
  // No Overlapping
  EXISTING_EXCEPTION_OVERLAP: 'EXISTING_EXCEPTION_OVERLAP',
};

exports.configurationSaveError = {
  // The deliveryWindowMin cannot be greater than deliveryWindowMax
  INVALID_DELIVERY_WINDOW: 'INVALID_DELIVERY_WINDOW',
};

exports.orderSetError = {
  // Note must be less than 4096 chars
  NOTE_MAX_LENGTH_EXCEEDED: 'NOTE_MAX_LENGTH_EXCEEDED',
  // Order set must exist
  INVALID_ORDER_SET: 'INVALID_ORDER_SET',
  MERCHANT_INITIALIZATION_ERROR: 'MERCHANT_INITIALIZATION_ERROR',
  POS_INITIALIZATION_ERROR: 'POS_INITIALIZATION_ERROR',
};

exports.weeklyScheduleError = {
  // The Brand Location must Exist
  INVALID_BRAND_LOCATION: 'INVALID_BRAND_LOCATION',
  // Weekly schedules must not overlap.
  OVERLAPPING_SCHEDULES: 'OVERLAPPING_SCHEDULES',
  // The open time string must be in this format: 'HH:mm'
  INVALID_OPEN_TIME_FORMAT: 'INVALID_OPEN_TIME_FORMAT',
  // The open time string must be in this format: 'HH:mm'
  INVALID_DELIVERY_OPEN_TIME_FORMAT: 'INVALID_DELIVERY_OPEN_TIME_FORMAT',
  // The open time string must be in this format: 'HH:mm'
  INVALID_EXPRESS_DELIVERY_OPEN_TIME_FORMAT:
    'INVALID_EXPRESS_DELIVERY_OPEN_TIME_FORMAT',
  // If openAllDay is false or null, an openTime value is required.
  MISSING_OPEN_TIME: 'MISSING_OPEN_TIME',
  // If openAllDay is false or null, an DELIVERY_OPEN_TIME value is required.
  MISSING_DELIVERY_OPEN_TIME: 'MISSING_DELIVERY_OPEN_TIME',
  // If openAllDay is false or null, an MISSING_DELIVERY_OPEN_TIME value is required.
  MISSING_EXPRESS_DELIVERY_OPEN_TIME: 'MISSING_EXPRESS_DELIVERY_OPEN_TIME',
  // If openAllDay is false or null, an openDuration value is required.
  MISSING_OPEN_DURATION: 'MISSING_OPEN_DURATION',
  // If openAllDay is false or null, an DELIVERY_OPEN_DURATION value is required.
  MISSING_DELIVERY_OPEN_DURATION: 'MISSING_DELIVERY_OPEN_DURATION',
  // If openAllDay is false or null, an MISSING_EXPRESS_DELIVERY_OPEN_DURATION value is required.
  MISSING_EXPRESS_DELIVERY_OPEN_DURATION:
    'MISSING_EXPRESS_DELIVERY_OPEN_DURATION',
};

exports.brandLocationUnavailableMenuItemError = {
  // The menu is invalid
  INVALID_MENU: 'INVALID_MENU',
  // The BrandLocation is Invalid
  INVALID_BRAND_LOCATION: 'INVALID_BRAND_LOCATION',
  // The Item is Subscribable
  SUBSCRIBABLE_ITEM: 'SUBSCRIBABLE_ITEM',
  // The menu item is invalid
  INVALID_MENU_ITEM: 'INVALID_MENU_ITEM',
  // The menu item is inactive
  MENU_ITEM_IS_INACTIVE: 'MENU_ITEM_IS_INACTIVE',
  // The menu item is inactive
  MENU_ITEM_AND_BRAND_NOT_MATCHED: 'MENU_ITEM_AND_BRAND_NOT_MATCHED',
};

exports.brandMenuError = {
  // The brand must exist
  INVALID_BRAND: 'INVALID_BRAND',
};

exports.brandMenuSectionError = {
  // The menu must exist
  INVALID_MENU: 'INVALID_MENU',
  // Name must be unique
  DUPLICATE_NAME: 'DUPLICATE_NAME',
  HAVE_ITEMS: 'HAVE_ITEMS',
};

exports.brandMenuItemError = {
  // Section Must Exist
  INVALID_SECTION: 'INVALID_SECTION',
  // Must have at least 1 option Set
  MISSING_OPTION_SET: 'MISSING_OPTION_SET',
  // Must have at least 1 option set Option
  MISSING_OPTIONS: 'MISSING_OPTIONS',
  WRONG_OPTIONS: 'WRONG_OPTIONS',
  SUBSCRIBABLE_ITEM: 'SUBSCRIBABLE_ITEM',
  SECTION_MUST_BE_ACTIVE_TO_UPDATE_MENU_ITEM: 'SECTION_MUST_BE_ACTIVE_TO_UPDATE_MENU_ITEM',
  ITEM_MUST_BE_ACTIVE_TO_UNAVAILABLE_PROCESS: 'ITEM_MUST_BE_ACTIVE_TO_UNAVAILABLE_PROCESS',
};

exports.brandLocationError = {
  // Brand Must Exist
  INVALID_BRAND: 'INVALID_BRAND',
  // Specified delivery location must exits
  INVALID_DELIVERY_LOCATION: 'INVALID_DELIVERY_LOCATION',
  // There was an error with the Authentication provider
  AUTH_PROVIDER_ERROR: 'AUTH_PROVIDER_ERROR',
  INVALID_CITY: 'INVALID_CITY',
  INVALID_CURRENCY: 'INVALID_CURRENCY',
  ADMIN_ALREADY_EXISTS: 'ADMIN_ALREADY_EXISTS',
  // required if branch is accepting express delivery orders
  EXPRESS_DELIVERY_RADIUS_REQUIRED: 'EXPRESS_DELIVERY_RADIUS_REQUIRED',
  ONLY_ONE_PRIMARY_COONTACT_ALLOWED: 'ONLY_ONE_PRIMARY_COONTACT_ALLOWED',
  ONE_PRIMARY_COONTACT_REQUIRED: 'ONE_PRIMARY_COONTACT_REQUIRED',
  INVALID_ADMIN: 'INVALID_ADMIN',
  BRAND_ADMIN_CAN_NOT_BE_BRANCH_ADMIN: 'BRAND_ADMIN_CAN_NOT_BE_BRANCH_ADMIN',
};

exports.customerAddressError = {
  // Customer must exist
  INVALID_CUSTOMER: 'INVALID_CUSTOMER',
  // Address must exist
  INVALID_ADDRESS: 'INVALID_ADDRESS',
  // Customer / Address combination must exist
  INVALID_CUSTOMER_ADDRESS: 'INVALID_CUSTOMER_ADDRESS',
};

exports.customerCarError = {
  // Customer must exist
  INVALID_CUSTOMER: 'INVALID_CUSTOMER',
};

exports.signupPromoError = {
  INVALID_CURRENCY: 'INVALID_CURRENCY',
  INVALID_COUNTRY: 'INVALID_COUNTRY',
  INVALID_SIGNUP_PROMO: 'INVALID_SIGNUP_PROMO',
};

exports.storeOrderSetError = {
  INVALID_CUSTOMER_ADDRESS: 'INVALID_CUSTOMER_ADDRESS',
  INVALID_BRAND: 'INVALID_BRAND',
};

exports.countryCreateError = {
  INVALID_CURRENCY: 'INVALID_CURRENCY',
  ALREADY_EXISTS: 'ALREADY_EXISTS',
};

exports.cityCreateError = {
  INVALID_COUNTRY: 'INVALID_COUNTRY',
};

exports.neighborhoodCreateError = {
  INVALID_CITY: 'INVALID_CITY',
  NEIGHBORHOOD_ALREADY_EXISTS: 'NEIGHBORHOOD_ALREADY_EXISTS',
};

exports.removeGroupAdminError = {
  INVALID_GROUP: 'INVALID_GROUP',
  INVALID_ADMIN: 'INVALID_ADMIN',
};

exports.orderAssignCourierError = {
  //  The order id provided does not exist / is invalid
  INVALID_ORDER: 'INVALID_ORDER',
  //  Courier name is invalid
  INVALID_COURIER: 'INVALID_COURIER',
};

exports.setCustomerPresentError = {
  INVALID_ORDER: 'INVALID_ORDER',
  INVALID_CUSTOMER: 'INVALID_CUSTOMER',
};

exports.orderSetStatusError = {
  PAYMENT_DUE: 'PAYMENT_DUE',
  STATUS_HAS_BEEN_ALREADY_CHANGED: 'STATUS_HAS_BEEN_ALREADY_CHANGED',
  UNEXPECTED_REQUESTED_STATUS: 'UNEXPECTED_REQUESTED_STATUS',
  INVALID_STATUS_NOTE: 'INVALID_STATUS_NOTE',
  ADMIN_PORTAL_CAN_NOT_UPDATE_MPOS_PICKUP_ORDER: 'ADMIN_PORTAL_CAN_NOT_UPDATE_MPOS_PICKUP_ORDER',
  ADMIN_PORTAL_CAN_NOT_UPDATE_MPOS_DELIVERY_ORDER: 'ADMIN_PORTAL_CAN_NOT_UPDATE_MPOS_DELIVERY_ORDER',
  INVALID_ORDER_SET_ID: 'INVALID_ORDER_SET_ID',
  INVALID_ORDER_SET_STATUS: 'INVALID_ORDER_SET_STATUS',
  BULK_CHANGE_IS_LIMITED_TO_10_ORDERS: 'BULK_CHANGE_IS_LIMITED_TO_10_ORDERS',
  UPDATED_STATUS_NOT_MATCHED_AN_ORDER_IN_LIST: 'UPDATED_STATUS_NOT_MATCHED_AN_ORDER_IN_LIST',
  TRANSACTIONAL_ERROR: 'TRANSACTIONAL_ERROR',
  UNAUTHORIZED_PROCESS: 'UNAUTHORIZED_PROCESS',
};

exports.storeOrderStatusError = {
  PAYMENT_DUE: 'PAYMENT_DUE',
  UNEXPECTED_ERROR: 'UNEXPECTED_ERROR',
  INVALID_ORDER: 'INVALID_ORDER',
  INVALID_STATE: 'INVALID_STATE',
  ORDER_ALREADY_PROCESSED: 'ORDER_ALREADY_PROCESSED',
  STATUS_HAS_BEEN_ALREADY_CHANGED: 'STATUS_HAS_BEEN_ALREADY_CHANGED',
};

exports.transactionCreateError = {
  INVALID_ORDER: 'INVALID_ORDER',
  INVALID_TYPE: 'INVALID_TYPE',
  INVALID_ACTION: 'INVALID_ACTION',
  INVALID_CUSTOMER: 'INVALID_CUSTOMER',
  INVALID_CURRENCY: 'INVALID_CURRENCY',
};

exports.orderSetSubscriptionEvent = {
  // A new OrderSet has been created
  ORDER_SET_CREATED: 'ORDER_SET_CREATED',
  // An existing OrderSet has been updated (payment/etc)
  ORDER_SET_UPDATED: 'ORDER_SET_UPDATED',
};

exports.storeOrderSetSubscriptionEvent = {
  // A new StoreOrderSet has been created
  STORE_ORDER_SET_CREATED: 'STORE_ORDER_SET_CREATED',
  // An existing StoreOrderSet has been updated (payment/etc)
  STORE_ORDER_SET_UPDATED: 'STORE_ORDER_SET_UPDATED',
};

exports.storeOrderSubscriptionEvent = {
  // A new StoreOrder has been created
  STORE_ORDER_CREATED: 'STORE_ORDER_CREATED',
  // An existing StoreOrder has been updated (payment/etc)
  STORE_ORDER_UPDATED: 'STORE_ORDER_UPDATED',
};

exports.mposOrderSubscriptionEvent = {
  // When customer  press to IAMHERE Button or arrived option duration finished trigger it
  ARRIVED_ORDER: 'ARRIVED_ORDER',
  // An arrived order completed trigger it
  COMPLETED_ORDER: 'COMPLETED_ORDER',
  // New order trigger it
  NEW_ORDER: 'NEW_ORDER',
};

exports.arrivedOrderSubscriptionEvent = {
  // When customer  press to IAMHERE Button or arrived option duration finished trigger it
  ARRIVED_ORDER_FOR_VENDOR: 'ARRIVED_ORDER_FOR_VENDOR',
  // An arrived order has been updated with completed status
  COMPLETED_ORDER_FOR_VENDOR: 'COMPLETED_ORDER_FOR_VENDOR',
};

exports.operatingHourChangeEvent = {
  // The event trigger when an admin updated weekly schedule
  WEEKLY_SCHEDULE_UPDATED: 'WEEKLY_SCHEDULE_UPDATED',
  // he event trigger when an admin added or updated schedule exception
  SCHEDULE_EXCEPTION_UPSERTED: 'SCHEDULE_EXCEPTION_UPSERTED',
};

// The available loyalty tier names
exports.loyaltyTierName = {
  // The default tier
  GREEN: 'GREEN',
  // Mid tier
  GOLD: 'GOLD',
  // Upper tier
  BLACK: 'BLACK',
};

exports.loyaltyTierStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
};

exports.loyaltyOrderCreateError = {
  // Unable to initiate merchant transaction
  MERCHANT_INITIALIZATION_ERROR: 'MERCHANT_INITIALIZATION_ERROR',
  // Invalid Customer (does not exist)
  INVALID_CUSTOMER: 'INVALID_CUSTOMER',
  // Invalid loyalty SKU (does not exist)
  INVALID_SKU: 'INVALID_SKU',
  // Invalid TopUp Ammount
  INVALID_TOPUP_AMMOUNT: 'INVALID_TOPUP_AMMOUNT',
  INVALID_PAYMENT_METHOD: 'INVALID_PAYMENT_METHOD',
};

exports.storeOrderCreateError = {
  INVALID_STORE_ORDER: 'INVALID_STORE_ORDER',
};

exports.storeOrderSetCreateError = {
  MERCHANT_INITIALIZATION_ERROR: 'MERCHANT_INITIALIZATION_ERROR',
  INVALID_CUSTOMER: 'INVALID_CUSTOMER',
  INVALID_PRODUCT: 'INVALID_PRODUCT',
  // Wrong Customer Address (address does not belong to customer)
  WRONG_CUSTOMER_ADDRESS: 'WRONG_CUSTOMER_ADDRESS',
  // Invalid Customer Address (Does not exist)
  INVALID_CUSTOMER_ADDRESS: 'INVALID_CUSTOMER_ADDRESS',
  ZERO_QUANTITY_REQUESTED: 'ZERO_QUANTITY_REQUESTED',
  INSUFFICIENT_CREDITS: 'INSUFFICIENT_CREDITS',
  PAYMENT_METHOD_REQUIRED: 'PAYMENT_METHOD_REQUIRED',
  CASH_NOT_AVAILABLE: 'CASH_NOT_AVAILABLE',
};

exports.paymentStatusOrderType = {
  // Cofe Order Set
  ORDER_SET: 'ORDER_SET',
  // A Loyalty Order
  LOYALTY_ORDER: 'LOYALTY_ORDER',
  // A Gift Card Order
  GIFT_CARD_ORDER: 'GIFT_CARD_ORDER',
  STORE_ORDER_SET: 'STORE_ORDER_SET',
  STORE_ORDER: 'STORE_ORDER',
  SUBSCRIPTION_ORDER: 'SUBSCRIPTION_ORDER',
  SAVE_CARD: 'SAVE_CARD',
};

exports.loyaltyTransactionType = {
  // Cofe Order Set
  ORDER_SET: 'ORDER_SET',
  ORDER_SET_REFUND: 'ORDER_SET_REFUND',
  // A Loyalty Order
  LOYALTY_ORDER: 'LOYALTY_ORDER',
  // A Loyalty Refill Order
  LOYALTY_REFILL: 'LOYALTY_REFILL',
  VOUCHER: 'VOUCHER',
  REFERRAL: 'REFERRAL',
  REFERRAL_EXPIRY: 'REFERRAL_EXPIRY',
  REFERRAL_REFUND: 'REFERRAL_REFUND',
  CASHBACK: 'CASHBACK',
  CASHBACK_EXPIRY: 'CASHBACK_EXPIRY',
  CASHBACK_REFUND: 'CASHBACK_REFUND',
  SIGNUP_PROMO: 'SIGNUP_PROMO',
  ADMIN_PANEL: 'ADMIN_PANEL',
  ADMIN_PANEL_SCRIPT: 'ADMIN_PANEL_SCRIPT',
  DISCOVERY_CREDITS: 'DISCOVERY_CREDITS',
  DISCOVERY_CREDITS_REFUND: 'DISCOVERY_CREDITS_REFUND',
  DISCOVERY_CREDITS_EXPIRY: 'DISCOVERY_CREDITS_EXPIRY',
  OTHER: 'OTHER',
};

exports.signupPromos = {
  SIGNUP: 'SIGNUP',
  INSTORE_ACTIVATION: 'INSTORE_ACTIVATION',
};

exports.orderSetSource = {
  ORDER_PLATFORM: 'ORDER_PLATFORM',
  MOBILE: 'MOBILE',
  SIRI: 'SIRI',
  ALEXA: 'ALEXA',
  AUTO_RENEWAL: 'AUTO_RENEWAL',
};

exports.customerSetLoyaltyTierError = {
  // Customer must exist
  INVALID_CUSTOMER: 'INVALID_CUSTOMER',
  // Must specify valid loyalty tier
  INVALID_LOYALTY_TIER: 'INVALID_LOYALTY_TIER',
};

exports.marketingNotificationSaveError = {
  // If an ID is provided to update then it must exist
  INVALID_MARKETING_NOTIFICATION: 'INVALID_MARKETING_NOTIFICATION',
  // A date must be provided that is in the future
  INVALID_DATE: 'INVALID_DATE',
  // A platform must be selected (targetAll, targetAndroid, or targetIos)
  INVALID_TARGET: 'INVALID_TARGET',
  // An attempt was made to update a notification that is not in 'pending' status
  CAN_ONLY_UPDATE_PENDING_NOTIFICATIONS:
    'CAN_ONLY_UPDATE_PENDING_NOTIFICATIONS',
};

exports.orderSetCommentTypes = {
  INQUIRY: 'INQUIRY',
  CANCELATION: 'CANCELATION',
  COMPLAIN: 'COMPLAIN',
  REQUEST: 'REQUEST',
};

exports.orderPaymentMethods = {
  CREDITS: 'CREDITS',
  CASH: 'CASH',
  KNET: 'KNET',
  CARD: 'CARD',
  GIFT_CARD: 'GIFT_CARD',
};

// deprecated
exports.creditsPaymentMethods = {
  KNET: 'KNET',
  CARD: 'CARD',
};

exports.orderSetStatusNames = orderStatuses;

exports.orderSetStatusPlatforms = {
  MOBIL: 'MOBIL',
  ADMIN_PORTAL: 'ADMIN_PORTAL',
  VENDOR_PORTAL: 'VENDOR_PORTAL',
  BARISTA_MPOS: 'BARISTA_MPOS',
  DRIVER: 'DRIVER',
  AUTOMATICALLY: 'AUTOMATICALLY',
};

exports.orderTypes = {
  DELIVERY: 'DELIVERY',
  PICKUP: 'PICKUP',
  EXPRESS_DELIVERY: 'EXPRESS_DELIVERY',
};

exports.paymentTypes = {
  MASTERCARD_CHECKOUT: 'MASTERCARD_CHECKOUT',
};

exports.rewardError = {
  // The brand must exist
  INVALID_BRAND: 'INVALID_BRAND',
  // Brand already have a reward
  BRAND_ALREADY_HAVE_REWARD: 'BRAND_ALREADY_HAVE_REWARD',
  // Child brand already rewared
  CHILD_BRAND_ALREADY_HAVE_REWARD: 'CHILD_BRAND_ALREADY_HAVE_REWARD',
};

exports.rewardStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  DELETED: 'DELETED',
};

exports.shippingPolicyStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  DELETED: 'DELETED',
};

exports.couponStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  DELETED: 'DELETED',
};

exports.rewardTierError = {
  INVALID_REWARD: 'INVALID_REWARD',
  TIER_IN_USE: 'TIER_IN_USE',
};

exports.rewardTierPerkError = {
  INVALID_REWARD_TIER: 'INVALID_REWARD_TIER',
  INVALID_MENU_ITEM: 'INVALID_MENU_ITEM',
  INACTIVE_MENU_ITEM: 'INACTIVE_MENU_ITEM',
};

exports.rewardTierPerkType = {
  ADD_POINTS: 'ADD_POINTS',
  DISCOUNT: 'DISCOUNT',
  FREE_DELIVERY: 'FREE_DELIVERY',
  FREE_DRINK: 'FREE_DRINK',
  FREE_FOOD: 'FREE_FOOD',
};

exports.rewardTierPerkApplyType = {
  ONGOING: 'ONGOING',
  CHOOSE: 'CHOOSE',
  SPECIAL: 'SPECIAL',
};

exports.customerTiersMove = {
  UP: 'UP',
  DOWN: 'DOWN',
};

exports.rewardPointsTransactionSource = {
  ORDER_SET: 'ORDER_SET',
  PERK: 'PERK',
  COUPON: 'COUPON',
};

exports.menuItemType = {
  DRINK: 'DRINK',
  FOOD: 'FOOD',
  OTHERS: 'OTHERS',
};

exports.customerStatus = {
  NEW: 'NEW',
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  BLACK_LISTED: 'BLACK_LISTED',
  DELETED: 'DELETED'
};

exports.brandLocationPriceRuleError = {
  INVALID_BRAND_LOCATION: 'INVALID_BRAND_LOCATION',
  UNAUTHORIZED_ADMIN: 'UNAUTHORIZED_ADMIN',
};

exports.brandLocationPriceRuleAction = {
  ADD: 'ADD',
  SUBTRACT: 'SUBTRACT',
};

exports.brandLocationPriceRuleType = {
  FIXED: 'FIXED',
  PERCENT: 'PERCENT',
};

exports.transactionAction = {
  TIP: 'TIP',
  ORDER: 'ORDER',
  COFE_CREDIT: 'COFE_CREDIT',
  GIFT_CARD: 'GIFT_CARD',
  REFUND: 'REFUND',
};

exports.transactionType = {
  CREDITED: 'CREDITED',
  DEBITED: 'DEBITED',
};

exports.orderSetRefundError = {
  INVALID_ORDER: 'INVALID_ORDER',
  ALREADY_REFUNDED: 'ALREADY_REFUNDED',
  NOT_PAID: 'NOT_PAID',
};

exports.orderItemsRefundError = {
  INVALID_ORDER: 'INVALID_ORDER',
  INVALID_QUANTITY: 'INVALID_QUANTITY',
  ALREADY_REFUNDED: 'ALREADY_REFUNDED',
  NOT_PAID: 'NOT_PAID',
};

exports.storeOrderSetRefundError = {
  INVALID_ORDER: 'INVALID_ORDER',
  ALREADY_REFUNDED: 'ALREADY_REFUNDED',
  NOT_PAID: 'NOT_PAID',
};

exports.storeOrderProductsRefundError = {
  INVALID_ORDER: 'INVALID_ORDER',
  INVALID_QUANTITY: 'INVALID_QUANTITY',
  ALREADY_REFUNDED: 'ALREADY_REFUNDED',
  NOT_PAID: 'NOT_PAID',
};

exports.storeOrderProductSaveError = {
  PRODUCT_HAS_MINIMUN_ONE_CATEGORY: 'PRODUCT_HAS_MINIMUN_ONE_CATEGORY',
  INVALID_CATEGORY_ID: 'INVALID_CATEGORY_ID',
  BRAND_COUNTRY_NOT_MATCHED_CATEGORY_COUNTRY: 'BRAND_COUNTRY_NOT_MATCHED_CATEGORY_COUNTRY',
  MULTIPLE_CASH_PRODUCT: 'MULTIPLE_CASH_PRODUCT',
  INVALID_ID: 'INVALID_ID',
  PROCESS_FAILED: 'PROCESS_FAILED',
};

exports.menuItemUnavailableState = {
  SOLD_OUT: 'SOLD_OUT',
  NOT_COMMERCIALIZED: 'NOT_COMMERCIALIZED',
};

exports.bannerSaveError = {
  // If an ID is provided to update then it must exist
  INVALID_BANNER: 'INVALID_BANNER',
};

exports.brandAdminError = {
  NOT_EXISTS: 'NOT_EXISTS',
  INVALID_VALID: 'INVALID_VALID',
  DUPLICATE_EMAIL: 'DUPLICATE_EMAIL',
};

exports.loyaltyTierSaveError = {
  DUPLICATE_SKU: 'DUPLICATE_SKU',
  INVALID_CUSTOM_AMOUNT: 'INVALID_CUSTOM_AMOUNT',
  INVALID_MIN_AND_MAX_AMOUNT: 'INVALID_MIN_AND_MAX_AMOUNT',
};

exports.loyaltyBonusSaveError = {
  ONE_BONUS_ALLOWED_FOR_FIXED_LOYALTY_TIER:
    'ONE_BONUS_ALLOWED_FOR_FIXED_LOYALTY_TIER',
  INVALID_LOYALTY_BONUS_BOUNDS: 'INVALID_LOYALTY_BONUS_BOUNDS',
  OVERLAPPING_BONUS_BOUNDS: 'OVERLAPPING_BONUS_BOUNDS',
};

exports.groupCreateError = {
  DUPLICATE_NAME: 'DUPLICATE_NAME',
};

exports.roleCreateError = {
  DUPLICATE_NAME: 'DUPLICATE_NAME',
};

exports.permissionCreateError = {
  DUPLICATE_NAME: 'DUPLICATE_NAME',
};

exports.paymentServices = {
  MY_FATOORAH: 'MY_FATOORAH',
  MOBILE_EXPRESS: 'MOBILE_EXPRESS',
};

exports.customerCardTokenSaveError = {
  MISSING_TOKEN: 'MISSING_TOKEN',
  MISSING_CUSTOMER_ID: 'MISSING_CUSTOMER_ID',
  MISSING_COUNTRY_ISO: 'MISSING_COUNTRY_ISO',
  DUPLICATE_TOKEN: 'DUPLICATE_TOKEN',
  INVALID_CUSTOMER: 'INVALID_CUSTOMER',
  COUNTRY_CODE_MISSING: 'COUNTRY_CODE_MISSING',
};

exports.customerCardSaveStatus = {
  CARD_SAVED_SUCCESSFULLY: 'CARD_SAVED_SUCCESSFULLY',
  CARD_SAVE_FAILED: 'CARD_SAVE_FAILED',
  INVALID_CARD_TOKEN: 'INVALID_CARD_TOKEN',
  ADDITIONAL_VERIFICATION_NEEDED: 'ADDITIONAL_VERIFICATION_NEEDED',
};

exports.importCitiesError = {
  INVALID_FILE: 'INVALID_FILE',
  INVALID_CONTENT: 'INVALID_CONTENT',
  INVALID_COUNTRY: 'INVALID_COUNTRY',
  INVALID_NAME: 'INVALID_NAME',
  DUPLICATE_NAME: 'DUPLICATE_NAME',
  INVALID_STATUS: 'INVALID_STATUS',
  INVALID_FILE_FORMAT: 'INVALID_FILE_FORMAT',
};

exports.importNeighborhoodsError = {
  INVALID_FILE: 'INVALID_FILE',
  INVALID_CONTENT: 'INVALID_CONTENT',
  INVALID_COUNTRY: 'INVALID_COUNTRY',
  INVALID_CITY: 'INVALID_CITY',
  INVALID_NAME: 'INVALID_NAME',
  DUPLICATE_NAME: 'DUPLICATE_NAME',
  INVALID_STATUS: 'INVALID_STATUS',
  INVALID_FILE_FORMAT: 'INVALID_FILE_FORMAT',
};

exports.couponPayloadError = {
  DUPLICATE_TYPE: 'DUPLICATE_TYPE',
  DUPLICATE_CODE: 'DUPLICATE_CODE',
  CASHBACK_EXPIRY_DAYS_MISSING: 'CASHBACK_EXPIRY_DAYS_MISSING',
  SAVED_CARD_BANK_OR_CARD_MISSING: 'SAVED_CARD_BANK_OR_CARD_MISSING',
  INVALID_PAID_PERCENTAGE_SUM: 'INVALID_PAID_PERCENTAGE_SUM',
  FIRST_ORDERS_TYPE_MISSING: 'FIRST_ORDERS_TYPE_MISSING',
  INVALID_NO_OF_FIRST_ORDERS: 'INVALID_NO_OF_FIRST_ORDERS',
};

exports.redeemGiftCardError = {
  INVALID_CODE: 'INVALID_CODE',
  ALREADY_REDEEMED: 'ALREADY_REDEEMED',
  INVALID_CUSTOMER: 'INVALID_CUSTOMER',
};

exports.inactiveGiftCardError = {
  INVALID_GIFT_CARD: 'INVALID_GIFT_CARD',
  ALREADY_REDEEMED: 'ALREADY_REDEEMED',
  ALREADY_REVOKE: 'ALREADY_REVOKE',
  ALREADY_INACTIVE: 'ALREADY_INACTIVE',
  STATUS_MUST_BE_ACTIVE: 'STATUS_MUST_BE_ACTIVE',
  UNAUTHORIZED_ADMIN: 'UNAUTHORIZED_ADMIN'
};

exports.giftCardSectionType = {
  FEATURED: 'FEATURED',
  BRAND: 'BRAND',
  GENERIC: 'GENERIC',
};

exports.adminDetailsPayloadError = {
  UNAUTHORIZED: 'UNAUTHORIZED',
  NOT_FOUND: 'NOT_FOUND',
  DELETED: 'DELETED',
  INACTIVE: 'INACTIVE',
};

exports.resetAdminPasswordError = {
  NOT_EXISTS: 'NOT_EXISTS',
  AUTH_PROVIDER_ERROR: 'AUTH_PROVIDER_ERROR',
};

exports.couponType = {
  ADD_POINTS: 'ADD_POINTS',
  FREE_DELIVERY: 'FREE_DELIVERY',
  FREE_DRINK: 'FREE_DRINK',
  FREE_FOOD: 'FREE_FOOD',
  FLAT_AMOUNT: 'FLAT_AMOUNT',
  PERCENTAGE: 'PERCENTAGE',
  COFE_CREDITS: 'COFE_CREDITS',
};

exports.couponDetailUsedOn = {
  ORDER_SET: 'ORDER_SET',
  CREDITS_TRANSACTION: 'CREDITS_TRANSACTION',
  SUBSCRIPTION_ORDER: 'SUBSCRIPTION_ORDER'
};

exports.redeemVoucherError = {
  INVALID_VOUCHER: 'INVALID_VOUCHER',
};

exports.invoiceComponentType = {
  SUBTOTAL: 'SUBTOTAL',
  SERVICE_FEE: 'SERVICE_FEE',
  VOUCHER: 'VOUCHER',
  // VOUCHER_PERCENTAGE: 'VOUCHER_PERCENTAGE',
  REWARD_DISCOUNT: 'REWARD_DISCOUNT',
  // REWARD_DISCOUNT_PERCENTAGE: 'REWARD_DISCOUNT_PERCENTAGE',
  TOTAL: 'TOTAL',
  AMOUNT_DUE: 'AMOUNT_DUE',
  GIFT_CARD: 'GIFT_CARD',
  CREDITS: 'CREDITS',
  DISCOVERY_CREDITS: 'DISCOVERY_CREDITS',
  REFERRAL: 'REFERRAL',
  CASHBACK: 'CASHBACK',
  AMOUNT_PAID: 'AMOUNT_PAID',
  SUBSCRIPTION_DISCOUNT: 'SUBSCRIPTION_DISCOUNT',
};

exports.giftCardCollectionStatus = {
  ACTIVE: 'ACTIVE',
  INTERNAL: 'INTERNAL',
  INACTIVE: 'INACTIVE',
};

exports.giftCardCollectionSaveError = {
  INVALID_COUNTRY: 'INVALID_COUNTRY',
  INVALID_COLLECTION_NAME: 'INVALID_COLLECTION_NAME',
  ALREADY_EXISTS: 'ALREADY_EXISTS',
};

exports.giftCardTemplateStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
};

exports.giftCardTemplateSaveError = {
  NOT_EXISTS: 'NOT_EXISTS',
  INVALID_PAID_PERCENTAGE_SUM: 'INVALID_PAID_PERCENTAGE_SUM',
  INVALID_AVAILABLE_TIME: 'INVALID_AVAILABLE_TIME',
  INVALID_BRAND_ID: 'INVALID_BRAND_ID'
};

exports.giftCardDeliveryMethod = {
  EMAIL: 'EMAIL',
  SMS: 'SMS',
  SHARE_MESSAGE: 'SHARE_MESSAGE',
};

exports.giftCardStatus = {
  ACTIVE: 'ACTIVE',
  REDEEMED: 'REDEEMED',
  REVOKE: 'REVOKE',
  INACTIVE: 'INACTIVE',
};

exports.giftCardOrderCreateError = {
  MERCHANT_INITIALIZATION_ERROR: 'MERCHANT_INITIALIZATION_ERROR',
  MIN_LIMIT_EXCEEDED: 'MIN_LIMIT_EXCEEDED',
  MAX_LIMIT_EXCEEDED: 'MAX_LIMIT_EXCEEDED',
  INSUFFICIENT_CREDITS: 'INSUFFICIENT_CREDITS',
  PAYMENT_METHOD_REQUIRED: 'PAYMENT_METHOD_REQUIRED',
};

exports.giftCardTransactionOrderType = {
  ORDER_SET: 'ORDER_SET',
  GIFT_CARD_ORDER: 'GIFT_CARD_ORDER',
  REFUND: 'REFUND',
  SCRIPT_GENERATION: 'SCRIPT_GENERATION',
};

exports.updateCofeCreditsTransactionType = {
  CREDIT: 'CREDIT',
  DEBIT: 'DEBIT',
};

exports.updateCofeCreditsError = {
  INVALID_CUSTOMER: 'INVALID_CUSTOMER',
  INVALID_CURRENCY: 'INVALID_CURRENCY',
  INVALID_AMOUNT: 'INVALID_AMOUNT',
  REASON_MUST_BE_SET: 'REASON_MUST_BE_SET',
};

exports.shippingPolicyProperty = {
  DISTANCE: 'DISTANCE',
  CART_COST: 'CART_COST',
};

exports.comparisionOperator = {
  GREATER_THAN_OR_EQUAL: 'GREATER_THAN_OR_EQUAL',
};

exports.shippingPolicyProperty = {
  DISTANCE: 'DISTANCE',
  CART_COST: 'CART_COST',
};

exports.referralStatusTypes = {
  JOINED: 'JOINED',
  ORDERED: 'ORDERED',
};

exports.paymentProvider = {
  MY_FATOORAH: 'MY_FATOORAH',
  CHECKOUT: 'CHECKOUT',
  MOBILE_EXPRESS: 'MOBILE_EXPRESS',
  TAP: 'TAP',
};

exports.paymentMethodSourceType = {
  SAVED_CUSTOMER_CARD_TOKEN: 'SAVED_CUSTOMER_CARD_TOKEN',
  TOKEN: 'TOKEN',
};

exports.customerCardTokenStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
};

exports.uILayoutType = {
  LIST: 'LIST',
  CAROUSEL: 'CAROUSEL',
};

exports.uITargetActionType = {
  DEEP_LINK: 'DEEP_LINK',
};

exports.storeHeaderSaveError = {
  INVALID_COUNTRY: 'INVALID_COUNTRY',
};

exports.storeOrderTrackingInfoSaveError = {
  INVALID_ORDER_TYPE: 'INVALID_ORDER_TYPE',
  INVALID_STORE_ORDER: 'INVALID_STORE_ORDER',
};

exports.storeOrderSetStatusName = {
  INITIATED: 'INITIATED',
  PLACED: 'PLACED',
  PARTIALLY_DISPATCHED: 'PARTIALLY_DISPATCHED',
  DISPATCHED: 'DISPATCHED',
  PARTIALLY_DELIVERED: 'PARTIALLY_DELIVERED',
  DELIVERED: 'DELIVERED',
  CANCELED: 'CANCELED',
  REJECTED: 'REJECTED',
};

exports.storeOrderStatusName = {
  INITIATED: 'INITIATED',
  PLACED: 'PLACED',
  DISPATCHED: 'DISPATCHED',
  DELIVERED: 'DELIVERED',
  CANCELED: 'CANCELED',
  REJECTED: 'REJECTED',
};

exports.countryConfigurationKeys = {
  REFERRAL_EXPIRY_PERIOD: 'REFERRAL_EXPIRY_PERIOD',
  REFERRAL_RECEIVER_DISCOUNT_PERCENTAGE:
    'REFERRAL_RECEIVER_DISCOUNT_PERCENTAGE',
  MAX_REFERRAL_DISCOUNT_LIMIT: 'MAX_REFERRAL_DISCOUNT_LIMIT',
  REFERRAL_REWARD_ON_FIRST_X_ORDERS: 'REFERRAL_REWARD_ON_FIRST_X_ORDERS',
  REFERRAL_RECEIVER_PROMO_LEVEL: 'REFERRAL_RECEIVER_PROMO_LEVEL',
  REFERRAL_RECEIVER_PROMO_X_ORDERD_PER_BRAND:
    'REFERRAL_RECEIVER_PROMO_X_ORDERD_PER_BRAND',
  BLOCK_CASH_ON_DELIVERY: 'BLOCK_CASH_ON_DELIVERY',
  AUTOMATIC_DELIVERY_INTEGRATION: 'AUTOMATIC_DELIVERY_INTEGRATION',
  DELIVERY_PARTNER: 'DELIVERY_PARTNER',
  DISCOVERY_CREDITS_ENABLE: 'DISCOVERY_CREDITS_ENABLE',
  DISCOVERY_CREDITS: 'DISCOVERY_CREDITS',
  DISCOVERY_CREDITS_CONSUMEABLE_PER_ORDER:
    'DISCOVERY_CREDITS_CONSUMEABLE_PER_ORDER',
  DISCOVERY_CREDITS_X_ORDERS_PER_BRAND: 'DISCOVERY_CREDITS_X_ORDERS_PER_BRAND',
  DISCOVERY_CREDITS_MIN_ORDER_AMOUNT: 'DISCOVERY_CREDITS_MIN_ORDER_AMOUNT',
  DISCOVERY_CREDITS_EXPIRES_IN_DAYS: 'DISCOVERY_CREDITS_EXPIRES_IN_DAYS',
  DISCOVERY_CREDITS_EXPIRY_DATE: 'DISCOVERY_CREDITS_EXPIRY_DATE',
  DISCOVERY_CREDITS_EXCEPTION_ENABLE: 'DISCOVERY_CREDITS_EXCEPTION_ENABLE',
  DISCOVERY_CREDITS_EXCEPTION_START_DATE: 'DISCOVERY_CREDITS_EXCEPTION_START_DATE',
  DISCOVERY_CREDITS_EXCEPTION_END_DATE: 'DISCOVERY_CREDITS_EXCEPTION_END_DATE',
  DISCOVERY_CREDITS_EXCEPTION_AMOUNT: 'DISCOVERY_CREDITS_EXCEPTION_AMOUNT',
  PICKUP_RADIUS: 'PICKUP_RADIUS',
  CAR_WINDOW_RADIUS: 'CAR_WINDOW_RADIUS',
  ESTIMATED_TIME_IN_MINS_PICKUP: 'ESTIMATED_TIME_IN_MINS_PICKUP',
  ESTIMATED_TIME_IN_MINS_CAR: 'ESTIMATED_TIME_IN_MINS_CAR',
  ESTIMATED_TIME_IN_MINS_DELIVERY: 'ESTIMATED_TIME_IN_MINS_DELIVERY',
  ESTIMATED_TIME_IN_MINS_EXPRESS_DELIVERY:
    'ESTIMATED_TIME_IN_MINS_EXPRESS_DELIVERY',
  DELAYED_TIME_IN_MINS_EXPRESS_DELIVERY: 'DELAYED_TIME_IN_MINS_EXPRESS_DELIVERY',
  // TODO: After IOS fixing, enabled it
  //MAINTENANCE_ENABLED: 'MAINTENANCE_ENABLED',
  COFE_STORE_ENABLED: 'COFE_STORE_ENABLED',
  I_AM_HERE_ENABLED: 'I_AM_HERE_ENABLED',
  I_AM_HERE_PICKUP_DEFAULT_OPTION: 'I_AM_HERE_PICKUP_DEFAULT_OPTION',
  I_AM_HERE_PICKUP_OPTIONS: 'I_AM_HERE_PICKUP_OPTIONS',
  I_AM_HERE_CAR_DEFAULT_OPTION: 'I_AM_HERE_CAR_DEFAULT_OPTION',
  I_AM_HERE_CAR_OPTIONS: 'I_AM_HERE_CAR_OPTIONS',
  SUBSCRIPTION_ENABLE: 'SUBSCRIPTION_ENABLE',
  SUBSCRIPTION_AUTO_RENEWAL_DEFAULT_VALUE:
    'SUBSCRIPTION_AUTO_RENEWAL_DEFAULT_VALUE',
  SUBSCRIPTION_AUTO_RENEWAL_ENABLED: 'SUBSCRIPTION_AUTO_RENEWAL_ENABLED',
  MINIMUM_AMOUNT_FOR_3DS: 'MINIMUM_AMOUNT_FOR_3DS',
  SERVICE_FEE_MAXLIMIT_PICKUP: 'SERVICE_FEE_MAXLIMIT_PICKUP',
  SERVICE_FEE_PERCENTAGE_PICKUP: 'SERVICE_FEE_PERCENTAGE_PICKUP',
  SERVICE_FEE_MAXLIMIT_DELIVERY: 'SERVICE_FEE_MAXLIMIT_DELIVERY',
  SERVICE_FEE_PERCENTAGE_DELIVERY: 'SERVICE_FEE_PERCENTAGE_DELIVERY',
  SERVICE_FEE_MAXLIMIT_CAR: 'SERVICE_FEE_MAXLIMIT_CAR',
  SERVICE_FEE_PERCENTAGE_CAR: 'SERVICE_FEE_PERCENTAGE_CAR',
  SERVICE_FEE_MAXLIMIT_EXPRESS_DELIVERY: 'SERVICE_FEE_MAXLIMIT_EXPRESS_DELIVERY',
  SERVICE_FEE_PERCENTAGE_EXPRESS_DELIVERY: 'SERVICE_FEE_PERCENTAGE_EXPRESS_DELIVERY',
  SERVICE_FEE_ENABLED: 'SERVICE_FEE_ENABLED',
  CARD_SAVE_PROVIDER: 'CARD_SAVE_PROVIDER',
  CHAT_WITH_US_CALL_US_OPTION_ENABLED: 'CHAT_WITH_US_CALL_US_OPTION_ENABLED',
  CHAT_WITH_US_LIVE_CHAT_OPTION_ENABLED: 'CHAT_WITH_US_LIVE_CHAT_OPTION_ENABLED',
};

exports.ServiceFeeMappingForFulfillments = {
  PICKUP: {
    MAXLIMIT: 'SERVICE_FEE_MAXLIMIT_PICKUP',
    PERCENTAGE: 'SERVICE_FEE_PERCENTAGE_PICKUP'
  },
  DELIVERY: {
    MAXLIMIT: 'SERVICE_FEE_MAXLIMIT_DELIVERY',
    PERCENTAGE: 'SERVICE_FEE_PERCENTAGE_DELIVERY'
  },
  CAR: {
    MAXLIMIT: 'SERVICE_FEE_MAXLIMIT_CAR',
    PERCENTAGE: 'SERVICE_FEE_PERCENTAGE_CAR'
  },
  EXPRESS_DELIVERY: {
    MAXLIMIT: 'SERVICE_FEE_MAXLIMIT_EXPRESS_DELIVERY',
    PERCENTAGE: 'SERVICE_FEE_PERCENTAGE_EXPRESS_DELIVERY',
  }
};

exports.couponValidationError = {
  NON_EXISTING_CUSTOMER_CARD: 'NON_EXISTING_CUSTOMER_CARD',
  INVALID_COUPON_OR_INAPPLICABLE_PAYMENT_METHOD:
    'INVALID_COUPON_OR_INAPPLICABLE_PAYMENT_METHOD',
  INAPPLICABLE_BANK_OR_CARD_FOR_COUPON: 'INAPPLICABLE_BANK_OR_CARD_FOR_COUPON',
  INAPPLICABLE_VENDOR_FOR_COUPON: 'INAPPLICABLE_VENDOR_FOR_COUPON',
  COUPON_ALREADY_CONSUMED_BY_VENDOR: 'COUPON_ALREADY_CONSUMED_BY_VENDOR',
  UNEXPECTED_ERROR: 'UNEXPECTED_ERROR',
  CAN_NOT_BE_USED_WITH_REWARD_DISCOUNT: 'CAN_NOT_BE_USED_WITH_REWARD_DISCOUNT',
  CAN_NOT_BE_USED_WITH_DISCOVERY_POINT: 'CAN_NOT_BE_USED_WITH_DISCOVERY_POINT',
  INVALID_SUBSCRIPTION: 'INVALID_SUBSCRIPTION',
  INVALID_COUPON_TYPE_FOR_SUBSCRIPTION: 'INVALID_COUPON_TYPE_FOR_SUBSCRIPTION',
  INVALID_PAYMENT_METHOD_FOR_SUBSCRIPTION: 'INVALID_PAYMENT_METHOD_FOR_SUBSCRIPTION',
  INVALID_COUPON: 'INVALID_COUPON',
  INVALID_COUPON_FOR_USER: 'INVALID_COUPON_FOR_USER'
};

exports.customerAnalyticsEvents = {
  FIRST_ORDER_COMPLETED: 'FIRST_ORDER_COMPLETED',
  FIRST_ORDER_PLACED: 'FIRST_ORDER_PLACED',
  TOTAL_ORDER_COMPLETED: 'TOTAL_ORDER_COMPLETED',
  TOTAL_ORDER_PLACED: 'TOTAL_ORDER_PLACED',
  REWARDS_REDEMPTION: 'REWARDS_REDEMPTION',
  REFERRAL_COMPLETION: 'REFERRAL_COMPLETION',

  // Added after 02.06.2023
  OTP_REQUEST: 'OTP_REQUEST',
  OD_VOUCHER_USED_COUNT: 'OD_VOUCHER_USED_COUNT',
  SUBSCRIPTION_VOUCHER_USED_COUNT: 'SUBSCRIPTION_VOUCHER_USED_COUNT',
  GIFT_CARD_PURCHASE_COUNT: 'GIFT_CARD_PURCHASE_COUNT',
  SUBSCRIPTION_PURCHASE_COUNT: 'SUBSCRIPTION_PURCHASE_COUNT',
  ORDER_PURCHASE: 'ORDER_PURCHASE'
};

exports.adjustDeviceTypeIdentifiers = {
  ADID: 'adid',
  GPS_ADID: 'gps_adid',
  IDFA: 'idfa',
};

exports.customerDeviceMetadataError = {
  // Customer must exist
  MISSING_CUSTOMER_ID: 'MISSING_CUSTOMER_ID',
  MISSING_DEVICE_IDENTIFIER_TYPE: 'MISSING_DEVICE_IDENTIFIER_TYPE',
  MISSING_DEVICE_ID: 'MISSING_DEVICE_ID',
};

exports.addressFieldType = {
  OTHER: 'OTHER',
  NICKNAME: 'NICKNAME',
  STREET: 'STREET',
  BLOCK: 'BLOCK',
  AVENUE: 'AVENUE',
  CITY: 'CITY',
  NEIGHBOURHOOD: 'NEIGHBOURHOOD',
  AREA: 'AREA',
  FLOOR: 'FLOOR',
  UNIT_NUMBER: 'UNIT_NUMBER',
  BUILDING_NAME: 'BUILDING_NAME',
  LANDMARK: 'LANDMARK',
  SULOCALITY: 'SULOCALITY',
  COUNTRY: 'COUNTRY',
  POSTAL_CODE: 'POSTAL_CODE',
  EMAIL: 'EMAIL',
  TELEPHONE: 'TELEPHONE',
  NOTE: 'NOTE',
};

exports.deliveryPartners = {
  CAREEM: 'CAREEM',
  JEEBLY: 'JEEBLY',
  MASHKOR: 'MASHKOR',
  TALABAT: 'TALABAT',
  BARQ: 'BARQ',
};

exports.singleSignOnStatusName = {
  SUCCESS_EXISTING_USER: 'SUCCESS_EXISTING_USER',
  SUCCESS_NO_USER_RECORD_FOUND: 'SUCCESS_NO_USER_RECORD_FOUND',
  DUPLICATE_ACTIVE_RECORDS_FOUND: 'DUPLICATE_ACTIVE_RECORDS_FOUND',
  USER_RECORDS_ARE_DISABLED: 'USER_RECORDS_ARE_DISABLED',
  FAILED_OTP_CHALLENGE: 'FAILED_OTP_CHALLENGE',
  SERVICE_ERROR: 'SERVICE_ERROR',
};

// Regular promo is existing promo which will reduce the total value of order.
// cashback promo will store the value of promo on placing the order and on successful payment we will add the promo value as credits in customer's wallet
exports.promoType = {
  REGULAR: 'REGULAR',
  CASHBACK: 'CASHBACK',
};

exports.customerGroupPayloadError = {
  INVALID_CUSTOMER: 'INVALID_CUSTOMER',
  CUSTOMER_NOT_FOUND: 'CUSTOMER_NOT_FOUND',
  INVALID_FORMAT: 'INVALID_FORMAT',
  CUSTOMER_GROUP_ALREADY_EXISTS: 'CUSTOMER_GROUP_ALREADY_EXISTS',
};

exports.addCreditsForCustomersPayloadError = {
  INVALID_CUSTOMER: 'INVALID_CUSTOMER',
  CUSTOMER_NOT_FOUND: 'CUSTOMER_NOT_FOUND',
  INVALID_FORMAT: 'INVALID_FORMAT',
  INVALID_CURRENCY: 'INVALID_CURRENCY',
};

exports.importBranchContactsPayloadError = {
  INVALID_BRANCH: 'INVALID_BRANCH',
  INVALID_FORMAT: 'INVALID_FORMAT',
};

exports.loyaltyBonusTypes = {
  FLAT: 'FLAT',
  PERCENT: 'PERCENT',
};

exports.notificationType = {
  ORDER_CREATED: 'ORDER_CREATED',
  ORDER_REJECTED: 'ORDER_REJECTED',
  ORDER_REPORTED: 'ORDER_REPORTED',
  FOODICS_SYNC_COMPLETED: 'FOODICS_SYNC_COMPLETED',
  FOODICS_SYNC_STARTED: 'FOODICS_SYNC_STARTED',
};

exports.updateCustomerStatusError = {
  INVALID_CUSTOMER_ID: 'INVALID_CUSTOMER_ID',
  SOMETHING_WENT_WRONG: 'SOMETHING_WENT_WRONG',
};

exports.otpRequestError = {
  DISABLED_CUSTOMER: 'DISABLED_CUSTOMER',
  DUPLICATE_CUSTOMER_EXIST: 'DUPLICATE_CUSTOMER_EXIST',
  RATE_LIMIT_EXCEEDED: 'RATE_LIMIT_EXCEEDED',
  COUNTRY_IS_NOT_AVAILABLE: 'COUNTRY_IS_NOT_AVAILABLE',
  SERVICE_ERROR: 'SERVICE_ERROR',
  ACTIVE_ACCOUNT_DELETION: 'ACTIVE_ACCOUNT_DELETION',
  INVALID_OTP_PROVIDER: 'INVALID_OTP_PROVIDER',
  INVALID_PHONE_NUMBER: 'INVALID_PHONE_NUMBER',
  INVALID_OTP_METHOD: 'INVALID_OTP_METHOD',
  INVALID_SECONDARY_OTP_PROVIDER: 'INVALID_SECONDARY_OTP_PROVIDER',
};

// Commission Model type
// zero / non zero commission model type
exports.commissionModelType = {
  ZERO_COMMISSION_MODEL: 'ZERO_COMMISSION_MODEL',
  NON_ZERO_COMMISSION_MODEL: 'NON_ZERO_COMMISSION_MODEL',
};

exports.brandLocationActivityEventType = {
  LOGIN: 'LOGIN',
  LOGOUT: 'LOGOUT',
  RECEIVED_ORDER: 'RECEIVED_ORDER',
  ACCEPTED_ORDER: 'ACCEPTED_ORDER',
  REJECTED_ORDER: 'REJECTED_ORDER',
  REPORTED_ORDER: 'REPORTED_ORDER',
  BRANCH_ONLINE: 'BRANCH_ONLINE',
  BRANCH_OFFLINE: 'BRANCH_OFFLINE',
};

exports.brandLocationActivityEventSaveError = {
  INVALID_EVENT_TYPE: 'INVALID_EVENT_TYPE',
};

exports.bankStatus = {
  ACTIVE: 'ACTIVE',
  DISABLED: 'DISABLED',
};

exports.bankCardStatus = {
  ACTIVE: 'ACTIVE',
  DISABLED: 'DISABLED',
};

exports.saveBankError = {
  // Customer must exist
  MISSING_IDENTIFIER: 'MISSING_IDENTIFIER',
  INVALID_LENGTH_IDENTIFIER: 'INVALID_LENGTH_IDENTIFIER',
  MISSING_NAME: 'MISSING_NAME',
  MISSING_COUNTRY_ID: 'MISSING_COUNTRY_ID',
  ALREADY_EXISTS_IDENTIFIER: 'ALREADY_EXISTS_IDENTIFIER',
};

exports.savePaymentGatewayChargeError = {
  INVALID_COUNTRY_ID: 'INVALID_COUNTRY_ID',
  ALREADY_EXISTS: 'ALREADY_EXISTS',
};

exports.saveBankCardError = {
  // Customer must exist
  MISSING_IDENTIFIER: 'MISSING_IDENTIFIER',
  INVALID_LENGTH_IDENTIFIER: 'INVALID_LENGTH_IDENTIFIER',
  MISSING_NAME: 'MISSING_NAME',
  MISSING_BANK_ID: 'MISSING_BANK_ID',
};

exports.brandLocationActivityQueryError = {
  MISSING_BRAND_LOCATION_ID: 'MISSING_BRAND_LOCATION_ID',
  END_DATE_IS_PRIOR_TO_BEGIN_DATE: 'END_DATE_IS_PRIOR_TO_BEGIN_DATE',
};

exports.scheduledNotificationEventTypes = {
  STOCK_REMINDER: 'STOCK_REMINDER',
};

exports.scheduledNotificationValidationErrorEnums = {
  EVENT_IS_NULL_OR_UNDEFINED: 'EVENT_IS_NULL_OR_UNDEFINED',
  MISSING_EVENT_TYPE: 'MISSING_EVENT_TYPE',
  MISSING_EVENT_DATA: 'MISSING_EVENT_DATA',
  MISSING_EVENT_DEVICE_TOKENS: 'MISSING_EVENT_DEVICE_TOKENS',
};

exports.firstOrdersType = {
  COFE: 'COFE',
  BRAND: 'BRAND',
};

exports.newBrandsSaveError = {
  MAX_COUNT_EXCEEDED: 'MAX_COUNT_EXCEEDED',
  DUPLICATE_ORDER: 'DUPLICATE_ORDER',
  WRONG_COUNTRY: 'WRONG_COUNTRY',
};

exports.streams = {
  ORDER_SET: 'ORDER_SET',
  ORDER_SET_STATUS: 'ORDER_SET_STATUS',
  BRAND: 'BRAND',
  BRANCH: 'BRANCH',
  MENU: 'MENU',
  COUNTRY: 'COUNTRY',
  CITY: 'CITY',
  BANNER: 'BANNER',
  NEIGHBOURHOOD: 'NEIGHBOURHOOD',
  CURRENCY: 'CURRENCY',
  CONFIGURATION: 'CONFIGURATION',
  COUPON: 'COUPON',
  COFE_CREDIT: 'COFE_CREDIT',
  GOLDEN_COFE: 'GOLDEN_COFE',
  DISCOVERY_CREDIT_ADDED_REMINDER: 'DISCOVERY_CREDIT_ADDED_REMINDER',
  DISCOVERY_CREDIT_REMAINING_REMINDER: 'DISCOVERY_CREDIT_REMAINING_REMINDER',
  BRAND_SUBSCRIPTION_MODEL: 'BRAND_SUBSCRIPTION_MODEL',
};

exports.streamActions = {
  CREATE: 'CREATE',
  UPDATE: 'UPDATE',
  DELETE: 'DELETE',
  STATUS_UPDATE: 'STATUS_UPDATE',
  VIEW: 'VIEW',
};

exports.importBrandSubscriptionModelError = {
  MISSING_PARAMETERS: 'MISSING_PARAMETERS',
  INVALID_URL: 'INVALID_URL',
  INVALID_FILE: 'INVALID_FILE',
  INVALID_CONTENT: 'INVALID_CONTENT',
  INVALID_FILE_FORMAT: 'INVALID_FILE_FORMAT',
  INVALID_COUNTRY: 'INVALID_COUNTRY',
  INVALID_BRAND: 'INVALID_BRAND',
  INVALID_FLAT_RATE: 'INVALID_FLAT_RATE',
  INVALID_PICKUP_COMMISSION: 'INVALID_PICKUP_COMMISSION',
  INVALID_DELIVERY_COMMISSION: 'INVALID_DELIVERY_COMMISSION',
  INVALID_COFE_STORE_COMMISSION: 'INVALID_COFE_STORE_COMMISSION',
  INVALID_SIGN_DATE: 'INVALID_SIGN_DATE',
  INVALID_EXPIRY_DATE: 'INVALID_EXPIRY_DATE',
  INVALID_AUTO_RENEWAL: 'INVALID_AUTO_RENEWAL',
  INVALID_REVENUE_MODEL: 'INVALID_REVENUE_MODEL',
};

exports.revenueModel = {
  ZERO_COMMISSION_MODEL: 'ZERO_COMMISSION_MODEL',
  PERCENTAGE_COMMISSION_MODEL: 'PERCENTAGE_COMMISSION_MODEL',
  FIXED_PLATFORM_MODEL: 'FIXED_PLATFORM_MODEL',
};

exports.walletInfoBarOptions = {
  NONE: 'NONE',
  PUBLIC_REMINDER: 'PUBLIC_REMINDER',
  ADDED_REMINDER: 'ADDED_REMINDER',
  REMAINING_REMINDER: 'REMAINING_REMINDER',
};

exports.creditTypes = {
  REGULAR_CREDITS: 'REGULAR_CREDITS',
  DISCOVERY_CREDITS: 'DISCOVERY_CREDITS',
  CASHBACK_CREDITS: 'CASHBACK_CREDITS',
  REFERRAL_CREDITS: 'REFERRAL_CREDITS',
};

exports.brandSubscriptionModelError = {
  INVALID_BRAND: 'INVALID_BRAND',
  DISCOVERY_CREDITS: 'DISCOVERY_CREDITS',
  CASHBACK_CREDITS: 'CASHBACK_CREDITS',
  REFERRAL_CREDITS: 'REFERRAL_CREDITS',
  FREE_TRIAL_UNDEFINED_DATE: 'FREE_TRIAL_UNDEFINED_DATE',
  FREE_TRIAL_INVALID_DATE: 'FREE_TRIAL_INVALID_DATE',
  INVALID_EXPIRY_DATE: 'INVALID_EXPIRY_DATE',
};

exports.revenueOrderTypes = {
  // Cofe Order Set
  ORDER_SET: 'ORDER_SET',
};

exports.newBrandLiteError = {
  MISSING_COUNTRY_IDENTIFIER: 'MISSING_COUNTRY_IDENTIFIER',
  INVALID_COUNTRY: 'INVALID_COUNTRY',
};

exports.locationsInRadiusLiteError = {
  MISSING_COUNTRY_IDENTIFIER: 'MISSING_COUNTRY_IDENTIFIER',
  INVALID_COUNTRY: 'INVALID_COUNTRY',
};

exports.rewardTierType = {
  SILVER: 'SILVER',
  GOLD: 'GOLD',
  DIAMOND: 'DIAMOND',
  PLATINUM: 'PLATINUM',
};

exports.mposDeviceError = {
  INVALID_DEVICE_CODE: 'INVALID_DEVICE_CODE',
  INVALID_DEVICE: 'INVALID_DEVICE',
  DEVICE_ALREADY_PAIRED: 'DEVICE_ALREADY_PAIRED',
  INVALID_BRAND_LOCATION: 'INVALID_BRAND_LOCATION',
  BRAND_LOCATION_ALREADY_PAIRED: 'DEVICE_ALREADY_PAIRED',
};

exports.mposDeviceStatus = {
  INIT: 'INIT',
  PAIRED: 'PAIRED',
  DELETED: 'DELETED',
};

exports.eventTypeForReport = {
  ITEM_CREATED: 'ITEM_CREATED',
  ITEM_DELETED: 'ITEM_DELETED',
  ITEM_PRICE_CHANGE: 'ITEM_PRICE_CHANGE',
  ITEM_STATUS_CHANGE: 'ITEM_STATUS_CHANGE',
  OPERATING_HOURS_CHANGE: 'OPERATING_HOURS_CHANGE',
  TOTAL_ONLINE_TIME: 'TOTAL_ONLINE_TIME',
};

exports.orderItemsAvailability = {
  NO_ITEMS_AVAILABLE: 'NO_ITEMS_AVAILABLE',
  PARTIAL_ITEMS_AVAILABLE: 'PARTIAL_ITEMS_AVAILABLE',
  ALL_ITEMS_AVAILABLE: 'ALL_ITEMS_AVAILABLE'
};

exports.pickupLocationStatus = {
  ACTIVE: 'ACTIVE',
  DELETED: 'DELETED'
};

exports.customerFavoriteBrandLocationError = {
  INVALID_CUSTOMER: 'INVALID_CUSTOMER',
  INVALID_BRAND_LOCATION: 'INVALID_BRAND_LOCATION',
  ALREADY_FAVORITED_BRAND_LOCATION: 'ALREADY_FAVORITED_BRAND_LOCATION',
  INVALID_FAVORITED_BRAND_LOCAITON: 'INVALID_FAVORITED_BRAND_LOCAITON',
};

exports.customerNotificationForBrandLocationOpenError = {
  INVALID_CUSTOMER: 'INVALID_CUSTOMER',
  INVALID_BRAND_LOCATION: 'INVALID_BRAND_LOCATION',
  ALREADY_NOTIFICATION_SET: 'ALREADY_NOTIFICATION_SET',
  STORE_ALLREADY_OPEN: 'STORE_ALLREADY_OPEN',
  ALREADY_NOTIFICATION_REMOVED: 'ALREADY_NOTIFICATION_REMOVED',
};

exports.orderRatingResponse = {
  EXCELLENT: 'EXCELLENT',
  GOOD: 'GOOD',
  AVERAGE: 'AVERAGE',
  POOR: 'POOR',
};

exports.saveOrderRatingError = {
  NOT_MATCHED_CUSTOMER: 'NOT_MATCHED_CUSTOMER',
  INVALID_ORDER_SET_ID: 'INVALID_ORDER_SET_ID',
  ALREADY_RATED_ORDER: 'ALREADY_RATED_ORDER',
  ORDER_NOT_COMPLETED: 'ORDER_NOT_COMPLETED',
  INVALID_RATING: 'INVALID_RATING',
  INVALID_OVERALL_QUESTION: 'INVALID_OVERALL_QUESTION',
  RATEABLE_TIME_OVER: 'RATEABLE_TIME_OVER',
};

exports.saveOrderRatingDetailError = {
  NOT_MATCHED_CUSTOMER: 'NOT_MATCHED_CUSTOMER',
  INVALID_ORDER_RATING_ID: 'INVALID_ORDER_RATING_ID',
  INVALID_COMMENT: 'INVALID_COMMENT',
  INVALID_QUESTION: 'INVALID_QUESTION',
  RATEABLE_TIME_OVER: 'RATEABLE_TIME_OVER',
};

exports.OrderRatingQuestionStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  DELETED: 'DELETED',
};

exports.OrderRatingQuestionSaveError = {
  MAX_LENGTH_EXCEEDED: 'MAX_LENGTH_EXCEEDED',
  INVALID_QUESTION: 'INVALID_QUESTION',
  DESCRIPTION_MISSING: 'DESCRIPTION_MISSING',
  ONLY_OVERALL_TYPE_ALLOWED: 'ONLY_OVERALL_TYPE_ALLOWED',
  TYPE_REQUIRED: 'TYPE_REQUIRED',
  FULFILLMENT_MISSING: 'FULFILLMENT_MISSING'
};

exports.OrderRatingStatus = {
  PENDING: 'PENDING',
  SKIPPED: 'SKIPPED',
  UNAVAILABLE: 'UNAVAILABLE',
  RATED: 'RATED',
};

exports.OrderRatingQuestionType = {
  OVERALL: 'OVERALL',
  FULFILLMENT_OVERALL: 'FULFILLMENT_OVERALL',
  DETAIL: 'DETAIL',
};

exports.orderCouponTypes = {
  REGULAR_ORDER: 'REGULAR_ORDER',
  SUBSCRIPTION_ORDER: 'SUBSCRIPTION_ORDER',
};

exports.redirectionCodes = {
  EXPRESS_DELIVERY_TRACKING_PAGE_URL: 'EDT',
};

exports.countryConfigurationChatWithUsEnums = {
  CALL_US: 'CALL_US',
  LIVE_CHAT: 'LIVE_CHAT'
};
